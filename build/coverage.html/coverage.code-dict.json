{"/home/travis/build/npmtest/node-npmtest-bleno/test.js":"/* istanbul instrument in package npmtest_bleno */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bleno/lib.npmtest_bleno.js":"/* istanbul instrument in package npmtest_bleno */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bleno = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bleno = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bleno/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bleno && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bleno */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bleno\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bleno.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_bleno.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bleno.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_bleno.__dirname +\n                    '/lib.npmtest_bleno.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bleno/node_modules/bleno/index.js":"var Bleno = require('./lib/bleno');\n\nmodule.exports = new Bleno();\n","/home/travis/build/npmtest/node-npmtest-bleno/node_modules/bleno/lib/bleno.js":"var debug = require('debug')('bleno');\n\nvar events = require('events');\nvar os = require('os');\nvar util = require('util');\n\nvar UuidUtil = require('./uuid-util');\n\nvar PrimaryService = require('./primary-service');\nvar Characteristic = require('./characteristic');\nvar Descriptor = require('./descriptor');\n\nvar bindings = null;\n\nvar platform = os.platform();\n\nif (platform === 'darwin') {\n  bindings = require('./mac/bindings');\n} else if (platform === 'linux' || platform === 'freebsd' || platform === 'win32' || platform === 'android') {\n  bindings = require('./hci-socket/bindings');\n} else {\n  throw new Error('Unsupported platform');\n}\n\nfunction Bleno() {\n  this.platform = 'unknown';\n  this.state = 'unknown';\n  this.address = 'unknown';\n  this.rssi = 0;\n  this.mtu = 20;\n\n  this._bindings = bindings;\n\n  this._bindings.on('stateChange', this.onStateChange.bind(this));\n  this._bindings.on('platform', this.onPlatform.bind(this));\n  this._bindings.on('addressChange', this.onAddressChange.bind(this));\n  this._bindings.on('advertisingStart', this.onAdvertisingStart.bind(this));\n  this._bindings.on('advertisingStop', this.onAdvertisingStop.bind(this));\n  this._bindings.on('servicesSet', this.onServicesSet.bind(this));\n  this._bindings.on('accept', this.onAccept.bind(this));\n  this._bindings.on('mtuChange', this.onMtuChange.bind(this));\n  this._bindings.on('disconnect', this.onDisconnect.bind(this));\n\n  this._bindings.on('rssiUpdate', this.onRssiUpdate.bind(this));\n\n  this._bindings.init();\n}\n\nutil.inherits(Bleno, events.EventEmitter);\n\nBleno.prototype.PrimaryService = PrimaryService;\nBleno.prototype.Characteristic = Characteristic;\nBleno.prototype.Descriptor = Descriptor;\n\nBleno.prototype.onPlatform = function(platform) {\n  debug('platform ' + platform);\n\n  this.platform = platform;\n};\n\nBleno.prototype.onStateChange = function(state) {\n  debug('stateChange ' + state);\n\n  this.state = state;\n\n  this.emit('stateChange', state);\n};\n\nBleno.prototype.onAddressChange = function(address) {\n  debug('addressChange ' + address);\n\n  this.address = address;\n};\n\nBleno.prototype.onAccept = function(clientAddress) {\n  debug('accept ' + clientAddress);\n  this.emit('accept', clientAddress);\n};\n\nBleno.prototype.onMtuChange = function(mtu) {\n  debug('mtu ' + mtu);\n\n  this.mtu = mtu;\n\n  this.emit('mtuChange', mtu);\n};\n\nBleno.prototype.onDisconnect = function(clientAddress) {\n  debug('disconnect' + clientAddress);\n  this.emit('disconnect', clientAddress);\n};\n\nBleno.prototype.startAdvertising = function(name, serviceUuids, callback) {\n  if (this.state !== 'poweredOn') {\n    var error = new Error('Could not start advertising, state is ' + this.state + ' (not poweredOn)');\n\n    if (typeof callback === 'function') {\n      callback(error);\n    } else {\n      throw error;\n    }\n  } else {\n    if (callback) {\n      this.once('advertisingStart', callback);\n    }\n\n    var undashedServiceUuids = [];\n\n    if (serviceUuids && serviceUuids.length) {\n      for (var i = 0; i < serviceUuids.length; i++) {\n        undashedServiceUuids[i] = UuidUtil.removeDashes(serviceUuids[i]);\n      }\n    }\n\n    this._bindings.startAdvertising(name, undashedServiceUuids);\n  }\n};\n\nBleno.prototype.startAdvertisingIBeacon = function(uuid, major, minor, measuredPower, callback) {\n  if (this.state !== 'poweredOn') {\n    var error = new Error('Could not start advertising, state is ' + this.state + ' (not poweredOn)');\n\n    if (typeof callback === 'function') {\n      callback(error);\n    } else {\n      throw error;\n    }\n  } else {\n    var undashedUuid =  UuidUtil.removeDashes(uuid);\n    var uuidData = new Buffer(undashedUuid, 'hex');\n    var uuidDataLength = uuidData.length;\n    var iBeaconData = new Buffer(uuidData.length + 5);\n\n    for (var i = 0; i < uuidDataLength; i++) {\n      iBeaconData[i] = uuidData[i];\n    }\n\n    iBeaconData.writeUInt16BE(major, uuidDataLength);\n    iBeaconData.writeUInt16BE(minor, uuidDataLength + 2);\n    iBeaconData.writeInt8(measuredPower, uuidDataLength + 4);\n\n    if (callback) {\n      this.once('advertisingStart', callback);\n    }\n\n    debug('iBeacon data = ' + iBeaconData.toString('hex'));\n\n    this._bindings.startAdvertisingIBeacon(iBeaconData);\n  }\n};\n\nBleno.prototype.onAdvertisingStart = function(error) {\n  debug('advertisingStart: ' + error);\n\n  if (error) {\n    this.emit('advertisingStartError', error);\n  }\n\n  this.emit('advertisingStart', error);\n};\n\nBleno.prototype.startAdvertisingWithEIRData = function(advertisementData, scanData, callback) {\n  if (typeof scanData === 'function') {\n    callback = scanData;\n    scanData = null;\n  }\n\n  if (this.state !== 'poweredOn') {\n    var error = new Error('Could not advertising scanning, state is ' + this.state + ' (not poweredOn)');\n\n    if (typeof callback === 'function') {\n      callback(error);\n    } else {\n      throw error;\n    }\n  } else {\n    if (callback) {\n      this.once('advertisingStart', callback);\n    }\n\n    this._bindings.startAdvertisingWithEIRData(advertisementData, scanData);\n  }\n};\n\nBleno.prototype.stopAdvertising = function(callback) {\n  if (callback) {\n    this.once('advertisingStop', callback);\n  }\n  this._bindings.stopAdvertising();\n};\n\nBleno.prototype.onAdvertisingStop = function() {\n  debug('advertisingStop');\n  this.emit('advertisingStop');\n};\n\nBleno.prototype.setServices = function(services, callback) {\n  if (callback) {\n    this.once('servicesSet', callback);\n  }\n  this._bindings.setServices(services);\n};\n\nBleno.prototype.onServicesSet = function(error) {\n  debug('servicesSet');\n\n  if (error) {\n    this.emit('servicesSetError', error);\n  }\n\n  this.emit('servicesSet', error);\n};\n\nBleno.prototype.disconnect = function() {\n  debug('disconnect');\n  this._bindings.disconnect();\n};\n\nBleno.prototype.updateRssi = function(callback) {\n  if (callback) {\n    this.once('rssiUpdate', function(rssi) {\n      callback(null, rssi);\n    });\n  }\n\n  this._bindings.updateRssi();\n};\n\nBleno.prototype.onRssiUpdate = function(rssi) {\n  this.emit('rssiUpdate', rssi);\n};\n\nmodule.exports = Bleno;\n","/home/travis/build/npmtest/node-npmtest-bleno/node_modules/bleno/lib/uuid-util.js":"module.exports.removeDashes = function(uuid) {\n  if (uuid) {\n    uuid = uuid.replace(/-/g, '');\n  }\n\n  return uuid;\n};\n","/home/travis/build/npmtest/node-npmtest-bleno/node_modules/bleno/lib/primary-service.js":"var events = require('events');\nvar util = require('util');\n\nvar debug = require('debug')('primary-service');\n\nvar UuidUtil = require('./uuid-util');\n\nfunction PrimaryService(options) {\n  this.uuid = UuidUtil.removeDashes(options.uuid);\n  this.characteristics = options.characteristics || [];\n}\n\nutil.inherits(PrimaryService, events.EventEmitter);\n\nPrimaryService.prototype.toString = function() {\n  return JSON.stringify({\n    uuid: this.uuid,\n    characteristics: this.characteristics\n  });\n};\n\nmodule.exports = PrimaryService;\n","/home/travis/build/npmtest/node-npmtest-bleno/node_modules/bleno/lib/characteristic.js":"var events = require('events');\nvar util = require('util');\n\nvar debug = require('debug')('characteristic');\n\nvar UuidUtil = require('./uuid-util');\n\nfunction Characteristic(options) {\n  this.uuid = UuidUtil.removeDashes(options.uuid);\n  this.properties = options.properties || [];\n  this.secure = options.secure || [];\n  this.value = options.value || null;\n  this.descriptors = options.descriptors || [];\n\n  if (this.value && (this.properties.length !== 1 || this.properties[0] !== 'read')) {\n    throw new Error('Characteristics with value can be read only!');\n  }\n\n  if (options.onReadRequest) {\n    this.onReadRequest = options.onReadRequest;\n  }\n\n  if (options.onWriteRequest) {\n    this.onWriteRequest = options.onWriteRequest;\n  }\n\n  if (options.onSubscribe) {\n    this.onSubscribe = options.onSubscribe;\n  }\n\n  if (options.onUnsubscribe) {\n    this.onUnsubscribe = options.onUnsubscribe;\n  }\n\n  if (options.onNotify) {\n    this.onNotify = options.onNotify;\n  }\n\n  if (options.onIndicate) {\n    this.onIndicate = options.onIndicate;\n  }\n\n  this.on('readRequest', this.onReadRequest.bind(this));\n  this.on('writeRequest', this.onWriteRequest.bind(this));\n  this.on('subscribe', this.onSubscribe.bind(this));\n  this.on('unsubscribe', this.onUnsubscribe.bind(this));\n  this.on('notify', this.onNotify.bind(this));\n  this.on('indicate', this.onIndicate.bind(this));\n}\n\nutil.inherits(Characteristic, events.EventEmitter);\n\nCharacteristic.RESULT_SUCCESS                  = Characteristic.prototype.RESULT_SUCCESS                  = 0x00;\nCharacteristic.RESULT_INVALID_OFFSET           = Characteristic.prototype.RESULT_INVALID_OFFSET           = 0x07;\nCharacteristic.RESULT_ATTR_NOT_LONG            = Characteristic.prototype.RESULT_ATTR_NOT_LONG            = 0x0b;\nCharacteristic.RESULT_INVALID_ATTRIBUTE_LENGTH = Characteristic.prototype.RESULT_INVALID_ATTRIBUTE_LENGTH = 0x0d;\nCharacteristic.RESULT_UNLIKELY_ERROR           = Characteristic.prototype.RESULT_UNLIKELY_ERROR           = 0x0e;\n\nCharacteristic.prototype.toString = function() {\n  return JSON.stringify({\n    uuid: this.uuid,\n    properties: this.properties,\n    secure: this.secure,\n    value: this.value,\n    descriptors: this.descriptors\n  });\n};\n\nCharacteristic.prototype.onReadRequest = function(offset, callback) {\n  callback(this.RESULT_UNLIKELY_ERROR, null);\n};\n\nCharacteristic.prototype.onWriteRequest = function(data, offset, withoutResponse, callback) {\n  callback(this.RESULT_UNLIKELY_ERROR);\n};\n\nCharacteristic.prototype.onSubscribe = function(maxValueSize, updateValueCallback) {\n  this.maxValueSize = maxValueSize;\n  this.updateValueCallback = updateValueCallback;\n};\n\nCharacteristic.prototype.onUnsubscribe = function() {\n  this.maxValueSize = null;\n  this.updateValueCallback = null;\n};\n\nCharacteristic.prototype.onNotify = function() {\n};\n\nCharacteristic.prototype.onIndicate = function() {\n};\n\nmodule.exports = Characteristic;\n","/home/travis/build/npmtest/node-npmtest-bleno/node_modules/bleno/lib/descriptor.js":"var debug = require('debug')('descriptor');\n\nvar UuidUtil = require('./uuid-util');\n\nfunction Descriptor(options) {\n  this.uuid = UuidUtil.removeDashes(options.uuid);\n  this.value = options.value || new Buffer(0);\n}\n\nDescriptor.prototype.toString = function() {\n  return JSON.stringify({\n    uuid: this.uuid,\n    value: Buffer.isBuffer(this.value) ? this.value.toString('hex') : this.value\n  });\n};\n\nmodule.exports = Descriptor;\n","/home/travis/build/npmtest/node-npmtest-bleno/node_modules/bleno/lib/hci-socket/bindings.js":"var debug = require('debug')('bindings');\n\nvar events = require('events');\nvar util = require('util');\nvar os = require('os');\n\nvar AclStream = require('./acl-stream');\nvar Hci = require('./hci');\nvar Gap = require('./gap');\nvar Gatt = require('./gatt');\n\nvar BlenoBindings = function() {\n  this._state = null;\n\n  this._advertising = false;\n\n  this._hci = new Hci();\n  this._gap = new Gap(this._hci);\n  this._gatt = new Gatt(this._hci);\n\n  this._address = null;\n  this._handle = null;\n  this._aclStream = null;\n};\n\nutil.inherits(BlenoBindings, events.EventEmitter);\n\nBlenoBindings.prototype.startAdvertising = function(name, serviceUuids) {\n  this._advertising = true;\n\n  this._gap.startAdvertising(name, serviceUuids);\n};\n\nBlenoBindings.prototype.startAdvertisingIBeacon = function(data) {\n  this._advertising = true;\n\n  this._gap.startAdvertisingIBeacon(data);\n};\n\nBlenoBindings.prototype.startAdvertisingWithEIRData = function(advertisementData, scanData) {\n  this._advertising = true;\n\n  this._gap.startAdvertisingWithEIRData(advertisementData, scanData);\n};\n\nBlenoBindings.prototype.stopAdvertising = function() {\n  this._advertising = false;\n\n  this._gap.stopAdvertising();\n};\n\nBlenoBindings.prototype.setServices = function(services) {\n  this._gatt.setServices(services);\n\n  this.emit('servicesSet');\n};\n\nBlenoBindings.prototype.disconnect = function() {\n  if (this._handle) {\n    debug('disconnect by server');\n\n    this._hci.disconnect(this._handle);\n  }\n};\n\nBlenoBindings.prototype.updateRssi = function() {\n  if (this._handle) {\n    this._hci.readRssi(this._handle);\n  }\n};\n\nBlenoBindings.prototype.init = function() {\n  this.onSigIntBinded = this.onSigInt.bind(this);\n\n  process.on('SIGINT', this.onSigIntBinded);\n  process.on('exit', this.onExit.bind(this));\n\n  this._gap.on('advertisingStart', this.onAdvertisingStart.bind(this));\n  this._gap.on('advertisingStop', this.onAdvertisingStop.bind(this));\n\n  this._gatt.on('mtuChange', this.onMtuChange.bind(this));\n\n  this._hci.on('stateChange', this.onStateChange.bind(this));\n  this._hci.on('addressChange', this.onAddressChange.bind(this));\n  this._hci.on('readLocalVersion', this.onReadLocalVersion.bind(this));\n\n  this._hci.on('leConnComplete', this.onLeConnComplete.bind(this));\n  this._hci.on('leConnUpdateComplete', this.onLeConnUpdateComplete.bind(this));\n  this._hci.on('rssiRead', this.onRssiRead.bind(this));\n  this._hci.on('disconnComplete', this.onDisconnComplete.bind(this));\n  this._hci.on('encryptChange', this.onEncryptChange.bind(this));\n  this._hci.on('leLtkNegReply', this.onLeLtkNegReply.bind(this));\n  this._hci.on('aclDataPkt', this.onAclDataPkt.bind(this));\n\n  this.emit('platform', os.platform());\n\n  this._hci.init();\n};\n\nBlenoBindings.prototype.onStateChange = function(state) {\n  if (this._state === state) {\n    return;\n  }\n  this._state = state;\n\n  if (state === 'unauthorized') {\n    console.log('bleno warning: adapter state unauthorized, please run as root or with sudo');\n    console.log('               or see README for information on running without root/sudo:');\n    console.log('               https://github.com/sandeepmistry/bleno#running-on-linux');\n  } else if (state === 'unsupported') {\n    console.log('bleno warning: adapter does not support Bluetooth Low Energy (BLE, Bluetooth Smart).');\n    console.log('               Try to run with environment variable:');\n    console.log('               [sudo] BLENO_HCI_DEVICE_ID=x node ...');\n  }\n\n  this.emit('stateChange', state);\n};\n\nBlenoBindings.prototype.onAddressChange = function(address) {\n  this.emit('addressChange', address);\n};\n\nBlenoBindings.prototype.onReadLocalVersion = function(hciVer, hciRev, lmpVer, manufacturer, lmpSubVer) {\n  if (manufacturer === 2) {\n    // Intel Corporation\n    this._gatt.maxMtu = 23;\n  } else if (manufacturer === 93) {\n    // Realtek Semiconductor Corporation\n    this._gatt.maxMtu = 23;\n  }\n};\n\nBlenoBindings.prototype.onAdvertisingStart = function(error) {\n  this.emit('advertisingStart', error);\n};\n\nBlenoBindings.prototype.onAdvertisingStop = function() {\n  this.emit('advertisingStop');\n};\n\nBlenoBindings.prototype.onLeConnComplete = function(status, handle, role, addressType, address, interval, latency, supervisionTimeout, masterClockAccuracy) {\n  if (role !== 1) {\n    // not slave, ignore\n    return;\n  }\n\n  this._address = address;\n  this._handle = handle;\n  this._aclStream = new AclStream(this._hci, handle, this._hci.addressType, this._hci.address, addressType, address);\n  this._gatt.setAclStream(this._aclStream);\n\n  this.emit('accept', address);\n};\n\nBlenoBindings.prototype.onLeConnUpdateComplete = function(handle, interval, latency, supervisionTimeout) {\n  // no-op\n};\n\nBlenoBindings.prototype.onDisconnComplete = function(handle, reason) {\n  if (this._aclStream) {\n    this._aclStream.push(null, null);\n  }\n\n  var address = this._address;\n\n  this._address = null;\n  this._handle = null;\n  this._aclStream = null;\n\n  if (address) {\n    this.emit('disconnect', address); // TODO: use reason\n  }\n\n  if (this._advertising) {\n    this._gap.restartAdvertising();\n  }\n};\n\nBlenoBindings.prototype.onEncryptChange = function(handle, encrypt) {\n  if (this._handle === handle && this._aclStream) {\n    this._aclStream.pushEncrypt(encrypt);\n  }\n};\n\nBlenoBindings.prototype.onLeLtkNegReply = function(handle) {\n  if (this._handle === handle && this._aclStream) {\n    this._aclStream.pushLtkNegReply();\n  }\n};\n\nBlenoBindings.prototype.onMtuChange = function(mtu) {\n  this.emit('mtuChange', mtu);\n};\n\nBlenoBindings.prototype.onRssiRead = function(handle, rssi) {\n  this.emit('rssiUpdate', rssi);\n};\n\nBlenoBindings.prototype.onAclDataPkt = function(handle, cid, data) {\n  if (this._handle === handle && this._aclStream) {\n    this._aclStream.push(cid, data);\n  }\n};\n\nBlenoBindings.prototype.onSigInt = function() {\n  var sigIntListeners = process.listeners('SIGINT');\n\n  if (sigIntListeners[sigIntListeners.length - 1] === this.onSigIntBinded) {\n    // we are the last listener, so exit\n    // this will trigger onExit, and clean up\n    process.exit(1);\n  }\n};\n\nBlenoBindings.prototype.onExit = function() {\n  this._gap.stopAdvertising();\n\n  this.disconnect();\n};\n\nmodule.exports = new BlenoBindings();\n","/home/travis/build/npmtest/node-npmtest-bleno/node_modules/bleno/lib/hci-socket/acl-stream.js":"var debug = require('debug')('acl-att-stream');\n\nvar events = require('events');\nvar util = require('util');\n\nvar crypto = require('./crypto');\nvar Smp = require('./smp');\n\nvar AclStream = function(hci, handle, localAddressType, localAddress, remoteAddressType, remoteAddress) {\n  this._hci = hci;\n  this._handle = handle;\n  this.encypted = false;\n\n  this._smp = new Smp(this, localAddressType, localAddress, remoteAddressType, remoteAddress);\n};\n\nutil.inherits(AclStream, events.EventEmitter);\n\n\nAclStream.prototype.write = function(cid, data) {\n  this._hci.writeAclDataPkt(this._handle, cid, data);\n};\n\nAclStream.prototype.push = function(cid, data) {\n  if (data) {\n    this.emit('data', cid, data);\n  } else {\n    this.emit('end');\n  }\n};\n\nAclStream.prototype.pushEncrypt = function(encrypt) {\n  this.encrypted = encrypt ? true : false;\n\n  this.emit('encryptChange', this.encrypted);\n};\n\nAclStream.prototype.pushLtkNegReply = function() {\n  this.emit('ltkNegReply');\n};\n\nmodule.exports = AclStream;\n","/home/travis/build/npmtest/node-npmtest-bleno/node_modules/bleno/lib/hci-socket/crypto.js":"var crypto = require('crypto');\n\nfunction r() {\n  return crypto.randomBytes(16);\n}\n\nfunction c1(k, r, pres, preq, iat, ia, rat, ra) {\n  var p1 = Buffer.concat([\n    iat,\n    rat,\n    preq,\n    pres\n  ]);\n\n  var p2 = Buffer.concat([\n    ra,\n    ia,\n    new Buffer('00000000', 'hex')\n  ]);\n\n  var res = xor(r, p1);\n  res = e(k, res);\n  res = xor(res, p2);\n  res = e(k, res);\n\n  return res;\n}\n\nfunction s1(k, r1, r2) {\n  return e(k, Buffer.concat([\n    r2.slice(0, 8),\n    r1.slice(0, 8)\n  ]));\n}\n\nfunction e(key, data) {\n  key = swap(key);\n  data = swap(data);\n\n  var cipher = crypto.createCipheriv('aes-128-ecb', key, '');\n  cipher.setAutoPadding(false);\n\n  return swap(Buffer.concat([\n    cipher.update(data),\n    cipher.final()\n  ]));\n}\n\nfunction xor(b1, b2) {\n  var result = new Buffer(b1.length);\n\n  for (var i = 0; i < b1.length; i++) {\n    result[i] = b1[i] ^ b2[i];\n  }\n\n  return result;\n}\n\nfunction swap(input) {\n  var output = new Buffer(input.length);\n\n  for (var i = 0; i < output.length; i++) {\n    output[i] = input[input.length - i - 1];\n  }\n\n  return output;\n}\n\nmodule.exports = {\n  r: r,\n  c1: c1,\n  s1: s1,\n  e: e\n};\n","/home/travis/build/npmtest/node-npmtest-bleno/node_modules/bleno/lib/hci-socket/smp.js":"var debug = require('debug')('smp');\n\nvar events = require('events');\nvar util = require('util');\n\nvar crypto = require('./crypto');\nvar mgmt = require('./mgmt');\n\nvar SMP_CID = 0x0006;\n\nvar SMP_PAIRING_REQUEST = 0x01;\nvar SMP_PAIRING_RESPONSE = 0x02;\nvar SMP_PAIRING_CONFIRM = 0x03;\nvar SMP_PAIRING_RANDOM = 0x04;\nvar SMP_PAIRING_FAILED = 0x05;\nvar SMP_ENCRYPT_INFO = 0x06;\nvar SMP_MASTER_IDENT = 0x07;\n\nvar SMP_UNSPECIFIED = 0x08;\n\nvar Smp = function(aclStream, localAddressType, localAddress, remoteAddressType, remoteAddress) {\n  this._aclStream = aclStream;\n\n  this._iat = new Buffer([(remoteAddressType === 'random') ? 0x01 : 0x00]);\n  this._ia = new Buffer(remoteAddress.split(':').reverse().join(''), 'hex');\n  this._rat = new Buffer([(localAddressType === 'random') ? 0x01 : 0x00]);\n  this._ra = new Buffer(localAddress.split(':').reverse().join(''), 'hex');\n\n  this._stk = null;\n  this._random = null;\n  this._diversifier = null;\n\n  this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\n  this.onAclStreamEncryptChangeBinded = this.onAclStreamEncryptChange.bind(this);\n  this.onAclStreamLtkNegReplyBinded = this.onAclStreamLtkNegReply.bind(this);\n  this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\n\n  this._aclStream.on('data', this.onAclStreamDataBinded);\n  this._aclStream.on('encryptChange', this.onAclStreamEncryptChangeBinded);\n  this._aclStream.on('ltkNegReply', this.onAclStreamLtkNegReplyBinded);\n  this._aclStream.on('end', this.onAclStreamEndBinded);\n};\n\nutil.inherits(Smp, events.EventEmitter);\n\nSmp.prototype.onAclStreamData = function(cid, data) {\n  if (cid !== SMP_CID) {\n    return;\n  }\n\n  var code = data.readUInt8(0);\n\n  if (SMP_PAIRING_REQUEST === code) {\n    this.handlePairingRequest(data);\n  } else if (SMP_PAIRING_CONFIRM === code) {\n    this.handlePairingConfirm(data);\n  } else if (SMP_PAIRING_RANDOM === code) {\n    this.handlePairingRandom(data);\n  } else if (SMP_PAIRING_FAILED === code) {\n    this.handlePairingFailed(data);\n  }\n};\n\nSmp.prototype.onAclStreamEncryptChange = function(encrypted) {\n  if (encrypted) {\n    if (this._stk && this._diversifier && this._random) {\n      this.write(Buffer.concat([\n        new Buffer([SMP_ENCRYPT_INFO]),\n        this._stk\n      ]));\n\n      this.write(Buffer.concat([\n        new Buffer([SMP_MASTER_IDENT]),\n        this._diversifier,\n        this._random\n      ]));\n    }\n  }\n};\n\nSmp.prototype.onAclStreamLtkNegReply = function() {\n    this.write(new Buffer([\n      SMP_PAIRING_FAILED,\n      SMP_UNSPECIFIED\n    ]));\n\n    this.emit('fail');\n};\n\nSmp.prototype.onAclStreamEnd = function() {\n  this._aclStream.removeListener('data', this.onAclStreamDataBinded);\n  this._aclStream.removeListener('encryptChange', this.onAclStreamEncryptChangeBinded);\n  this._aclStream.removeListener('ltkNegReply', this.onAclStreamLtkNegReplyBinded);\n  this._aclStream.removeListener('end', this.onAclStreamEndBinded);\n};\n\nSmp.prototype.handlePairingRequest = function(data) {\n  this._preq = data;\n\n  this._pres = new Buffer([\n    SMP_PAIRING_RESPONSE,\n    0x03, // IO capability: NoInputNoOutput\n    0x00, // OOB data: Authentication data not present\n    0x01, // Authentication requirement: Bonding - No MITM\n    0x10, // Max encryption key size\n    0x00, // Initiator key distribution: <none>\n    0x01  // Responder key distribution: EncKey\n  ]);\n\n  this.write(this._pres);\n};\n\nSmp.prototype.handlePairingConfirm = function(data) {\n  this._pcnf = data;\n\n  this._tk = new Buffer('00000000000000000000000000000000', 'hex');\n  this._r = crypto.r();\n\n  this.write(Buffer.concat([\n    new Buffer([SMP_PAIRING_CONFIRM]),\n    crypto.c1(this._tk, this._r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra)\n  ]));\n};\n\nSmp.prototype.handlePairingRandom = function(data) {\n  var r = data.slice(1);\n\n  var pcnf = Buffer.concat([\n    new Buffer([SMP_PAIRING_CONFIRM]),\n    crypto.c1(this._tk, r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra)\n  ]);\n\n  if (this._pcnf.toString('hex') === pcnf.toString('hex')) {\n    this._diversifier = new Buffer('0000', 'hex');\n    this._random = new Buffer('0000000000000000', 'hex');\n    this._stk = crypto.s1(this._tk, this._r, r);\n\n    mgmt.addLongTermKey(this._ia, this._iat, 0, 0, this._diversifier, this._random, this._stk);\n\n    this.write(Buffer.concat([\n      new Buffer([SMP_PAIRING_RANDOM]),\n      this._r\n    ]));\n  } else {\n    this.write(new Buffer([\n      SMP_PAIRING_FAILED,\n      SMP_PAIRING_CONFIRM\n    ]));\n\n    this.emit('fail');\n  }\n};\n\nSmp.prototype.handlePairingFailed = function(data) {\n  this.emit('fail');\n};\n\nSmp.prototype.write = function(data) {\n  this._aclStream.write(SMP_CID, data);\n};\n\nmodule.exports = Smp;\n","/home/travis/build/npmtest/node-npmtest-bleno/node_modules/bleno/lib/hci-socket/mgmt.js":"var debug = require('debug')('mgmt');\n\nvar events = require('events');\nvar util = require('util');\n\nvar BluetoothHciSocket = require('bluetooth-hci-socket');\n\nvar LTK_INFO_SIZE = 36;\n\nvar MGMT_OP_LOAD_LONG_TERM_KEYS = 0x0013;\n\nfunction Mgmt() {\n  this._socket = new BluetoothHciSocket();\n  this._ltkInfos = [];\n\n  this._socket.on('data', this.onSocketData.bind(this));\n  this._socket.on('error', this.onSocketError.bind(this));\n\n  this._socket.bindControl();\n  this._socket.start();\n}\n\nMgmt.prototype.onSocketData = function(data) {\n  debug('on data ->' + data.toString('hex'));\n};\n\nMgmt.prototype.onSocketError = function(error) {\n  debug('on error ->' + error.message);\n};\n\nMgmt.prototype.addLongTermKey = function(address, addressType, authenticated, master, ediv, rand, key) {\n  var ltkInfo = new Buffer(LTK_INFO_SIZE);\n\n  address.copy(ltkInfo, 0);\n  ltkInfo.writeUInt8(addressType.readUInt8(0) + 1, 6); // BDADDR_LE_PUBLIC = 0x01, BDADDR_LE_RANDOM 0x02, so add one\n\n  ltkInfo.writeUInt8(authenticated, 7);\n  ltkInfo.writeUInt8(master, 8);\n  ltkInfo.writeUInt8(key.length, 9);\n\n  ediv.copy(ltkInfo, 10);\n  rand.copy(ltkInfo, 12);\n  key.copy(ltkInfo, 20);\n\n  this._ltkInfos.push(ltkInfo);\n\n  this.loadLongTermKeys();\n};\n\nMgmt.prototype.clearLongTermKeys = function() {\n  this._ltkInfos = [];\n\n  this.loadLongTermKeys();\n};\n\nMgmt.prototype.loadLongTermKeys = function() {\n  var numLongTermKeys = this._ltkInfos.length;\n  var op = new Buffer(2 + numLongTermKeys * LTK_INFO_SIZE);\n\n  op.writeUInt16LE(numLongTermKeys, 0);\n\n  for (var i = 0; i < numLongTermKeys; i++) {\n    this._ltkInfos[i].copy(op, 2 + i * LTK_INFO_SIZE);\n  }\n\n  this.write(MGMT_OP_LOAD_LONG_TERM_KEYS, 0, op);\n};\n\nMgmt.prototype.write = function(opcode, index, data) {\n  var length = 0;\n\n  if (data) {\n    length = data.length;\n  }\n\n  var pkt = new Buffer(6 + length);\n\n  pkt.writeUInt16LE(opcode, 0);\n  pkt.writeUInt16LE(index, 2);\n  pkt.writeUInt16LE(length, 4);\n\n  if (length) {\n    data.copy(pkt, 6);\n  }\n\n  debug('writing -> ' + pkt.toString('hex'));\n  this._socket.write(pkt);\n};\n\nmodule.exports = new Mgmt();\n","/home/travis/build/npmtest/node-npmtest-bleno/node_modules/bleno/lib/hci-socket/hci.js":"var debug = require('debug')('hci');\n\nvar events = require('events');\nvar util = require('util');\n\nvar BluetoothHciSocket = require('bluetooth-hci-socket');\n\nvar HCI_COMMAND_PKT = 0x01;\nvar HCI_ACLDATA_PKT = 0x02;\nvar HCI_EVENT_PKT = 0x04;\n\nvar ACL_START_NO_FLUSH = 0x00;\nvar ACL_CONT  = 0x01;\nvar ACL_START = 0x02;\n\nvar EVT_DISCONN_COMPLETE = 0x05;\nvar EVT_ENCRYPT_CHANGE = 0x08;\nvar EVT_CMD_COMPLETE = 0x0e;\nvar EVT_CMD_STATUS = 0x0f;\nvar EVT_LE_META_EVENT = 0x3e;\n\nvar EVT_LE_CONN_COMPLETE = 0x01;\nvar EVT_LE_CONN_UPDATE_COMPLETE = 0x03;\n\nvar OGF_LINK_CTL = 0x01;\nvar OCF_DISCONNECT = 0x0006;\n\nvar OGF_HOST_CTL = 0x03;\nvar OCF_SET_EVENT_MASK = 0x0001;\nvar OCF_RESET = 0x0003;\nvar OCF_READ_LE_HOST_SUPPORTED = 0x006c;\nvar OCF_WRITE_LE_HOST_SUPPORTED = 0x006d;\n\nvar OGF_INFO_PARAM = 0x04;\nvar OCF_READ_LOCAL_VERSION = 0x0001;\nvar OCF_READ_BD_ADDR = 0x0009;\n\nvar OGF_STATUS_PARAM = 0x05;\nvar OCF_READ_RSSI = 0x0005;\n\nvar OGF_LE_CTL = 0x08;\nvar OCF_LE_SET_EVENT_MASK = 0x0001;\nvar OCF_LE_SET_ADVERTISING_PARAMETERS = 0x0006;\nvar OCF_LE_SET_ADVERTISING_DATA = 0x0008;\nvar OCF_LE_SET_SCAN_RESPONSE_DATA = 0x0009;\nvar OCF_LE_SET_ADVERTISE_ENABLE = 0x000a;\nvar OCF_LE_LTK_NEG_REPLY = 0x001B;\n\nvar DISCONNECT_CMD = OCF_DISCONNECT | OGF_LINK_CTL << 10;\n\nvar SET_EVENT_MASK_CMD = OCF_SET_EVENT_MASK | OGF_HOST_CTL << 10;\nvar RESET_CMD = OCF_RESET | OGF_HOST_CTL << 10;\nvar READ_LE_HOST_SUPPORTED_CMD = OCF_READ_LE_HOST_SUPPORTED | OGF_HOST_CTL << 10;\nvar WRITE_LE_HOST_SUPPORTED_CMD = OCF_WRITE_LE_HOST_SUPPORTED | OGF_HOST_CTL << 10;\n\nvar READ_LOCAL_VERSION_CMD = OCF_READ_LOCAL_VERSION | (OGF_INFO_PARAM << 10);\nvar READ_BD_ADDR_CMD = OCF_READ_BD_ADDR | (OGF_INFO_PARAM << 10);\n\nvar READ_RSSI_CMD = OCF_READ_RSSI | OGF_STATUS_PARAM << 10;\n\nvar LE_SET_EVENT_MASK_CMD = OCF_LE_SET_EVENT_MASK | OGF_LE_CTL << 10;\nvar LE_SET_ADVERTISING_PARAMETERS_CMD = OCF_LE_SET_ADVERTISING_PARAMETERS | OGF_LE_CTL << 10;\nvar LE_SET_ADVERTISING_DATA_CMD = OCF_LE_SET_ADVERTISING_DATA | OGF_LE_CTL << 10;\nvar LE_SET_SCAN_RESPONSE_DATA_CMD = OCF_LE_SET_SCAN_RESPONSE_DATA | OGF_LE_CTL << 10;\nvar LE_SET_ADVERTISE_ENABLE_CMD = OCF_LE_SET_ADVERTISE_ENABLE | OGF_LE_CTL << 10;\nvar LE_LTK_NEG_REPLY_CMD = OCF_LE_LTK_NEG_REPLY | OGF_LE_CTL << 10;\n\nvar HCI_OE_USER_ENDED_CONNECTION = 0x13;\n\nvar STATUS_MAPPER = require('./hci-status');\n\nvar Hci = function() {\n  this._socket = new BluetoothHciSocket();\n  this._isDevUp = null;\n  this._state = null;\n  this._deviceId = null;\n\n  this._handleBuffers = {};\n\n  this.on('stateChange', this.onStateChange.bind(this));\n};\n\nutil.inherits(Hci, events.EventEmitter);\n\nHci.STATUS_MAPPER = STATUS_MAPPER;\n\nHci.prototype.init = function() {\n  this._socket.on('data', this.onSocketData.bind(this));\n  this._socket.on('error', this.onSocketError.bind(this));\n\n  var deviceId = process.env.BLENO_HCI_DEVICE_ID ? parseInt(process.env.BLENO_HCI_DEVICE_ID) : undefined;\n\n\n  if (process.env.HCI_CHANNEL_USER) {\n    this._deviceId = this._socket.bindUser(deviceId);\n\n    this._socket.start();\n\n    this.reset();\n  } else {\n    this._deviceId = this._socket.bindRaw(deviceId);\n    this._socket.start();\n\n    this.pollIsDevUp();\n  }\n};\n\nHci.prototype.pollIsDevUp = function() {\n  var isDevUp = this._socket.isDevUp();\n\n  if (this._isDevUp !== isDevUp) {\n    if (isDevUp) {\n      this.setSocketFilter();\n      this.setEventMask();\n      this.setLeEventMask();\n      this.readLocalVersion();\n      this.writeLeHostSupported();\n      this.readLeHostSupported();\n      this.readBdAddr();\n    } else {\n      this.emit('stateChange', 'poweredOff');\n    }\n\n    this._isDevUp = isDevUp;\n  }\n\n  setTimeout(this.pollIsDevUp.bind(this), 1000);\n};\n\nHci.prototype.setSocketFilter = function() {\n  var filter = new Buffer(14);\n  var typeMask = (1 << HCI_EVENT_PKT)| (1 << HCI_ACLDATA_PKT);\n  var eventMask1 = (1 << EVT_DISCONN_COMPLETE) | (1 << EVT_ENCRYPT_CHANGE) | (1 << EVT_CMD_COMPLETE) | (1 << EVT_CMD_STATUS);\n  var eventMask2 = (1 << (EVT_LE_META_EVENT - 32));\n  var opcode = 0;\n\n  filter.writeUInt32LE(typeMask, 0);\n  filter.writeUInt32LE(eventMask1, 4);\n  filter.writeUInt32LE(eventMask2, 8);\n  filter.writeUInt16LE(opcode, 12);\n\n  debug('setting filter to: ' + filter.toString('hex'));\n  this._socket.setFilter(filter);\n};\n\nHci.prototype.setEventMask = function() {\n  var cmd = new Buffer(12);\n  var eventMask = new Buffer('fffffbff07f8bf3d', 'hex');\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(SET_EVENT_MASK_CMD, 1);\n\n  // length\n  cmd.writeUInt8(eventMask.length, 3);\n\n  eventMask.copy(cmd, 4);\n\n  debug('set event mask - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.reset = function() {\n  var cmd = new Buffer(4);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(OCF_RESET | OGF_HOST_CTL << 10, 1);\n\n  // length\n  cmd.writeUInt8(0x00, 3);\n\n  debug('reset - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.readLeHostSupported = function() {\n  var cmd = new Buffer(4);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(READ_LE_HOST_SUPPORTED_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x00, 3);\n\n  debug('read LE host supported - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.writeLeHostSupported = function() {\n  var cmd = new Buffer(6);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(WRITE_LE_HOST_SUPPORTED_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x02, 3);\n\n  // data\n  cmd.writeUInt8(0x01, 4); // le\n  cmd.writeUInt8(0x00, 5); // simul\n\n  debug('write LE host supported - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.readLocalVersion = function() {\n  var cmd = new Buffer(4);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(READ_LOCAL_VERSION_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x0, 3);\n\n  debug('read local version - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.readBdAddr = function() {\n  var cmd = new Buffer(4);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(READ_BD_ADDR_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x0, 3);\n\n  debug('read bd addr - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.setLeEventMask = function() {\n  var cmd = new Buffer(12);\n  var leEventMask = new Buffer('1f00000000000000', 'hex');\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(LE_SET_EVENT_MASK_CMD, 1);\n\n  // length\n  cmd.writeUInt8(leEventMask.length, 3);\n\n  leEventMask.copy(cmd, 4);\n\n  debug('set le event mask - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.setAdvertisingParameters = function() {\n  var cmd = new Buffer(19);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(LE_SET_ADVERTISING_PARAMETERS_CMD, 1);\n\n  // length\n  cmd.writeUInt8(15, 3);\n\n  var advertisementInterval = Math.floor((process.env.BLENO_ADVERTISING_INTERVAL ? parseFloat(process.env.BLENO_ADVERTISING_INTERVAL) : 100) * 1.6);\n\n  // data\n  cmd.writeUInt16LE(advertisementInterval, 4); // min interval\n  cmd.writeUInt16LE(advertisementInterval, 6); // max interval\n  cmd.writeUInt8(0x00, 8); // adv type\n  cmd.writeUInt8(0x00, 9); // own addr typ\n  cmd.writeUInt8(0x00, 10); // direct addr type\n  (new Buffer('000000000000', 'hex')).copy(cmd, 11); // direct addr\n  cmd.writeUInt8(0x07, 17);\n  cmd.writeUInt8(0x00, 18);\n\n  debug('set advertisement parameters - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.setAdvertisingData = function(data) {\n  var cmd = new Buffer(36);\n\n  cmd.fill(0x00);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(LE_SET_ADVERTISING_DATA_CMD, 1);\n\n  // length\n  cmd.writeUInt8(32, 3);\n\n  // data\n  cmd.writeUInt8(data.length, 4);\n  data.copy(cmd, 5);\n\n  debug('set advertisement data - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.setScanResponseData = function(data) {\n  var cmd = new Buffer(36);\n\n  cmd.fill(0x00);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(LE_SET_SCAN_RESPONSE_DATA_CMD, 1);\n\n  // length\n  cmd.writeUInt8(32, 3);\n\n  // data\n  cmd.writeUInt8(data.length, 4);\n  data.copy(cmd, 5);\n\n  debug('set scan response data - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.setAdvertiseEnable = function(enabled) {\n  var cmd = new Buffer(5);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(LE_SET_ADVERTISE_ENABLE_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x01, 3);\n\n  // data\n  cmd.writeUInt8(enabled ? 0x01 : 0x00, 4); // enable: 0 -> disabled, 1 -> enabled\n\n  debug('set advertise enable - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.disconnect = function(handle, reason) {\n  var cmd = new Buffer(7);\n\n  reason = reason || HCI_OE_USER_ENDED_CONNECTION;\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(DISCONNECT_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x03, 3);\n\n  // data\n  cmd.writeUInt16LE(handle, 4); // handle\n  cmd.writeUInt8(reason, 6); // reason\n\n  debug('disconnect - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.readRssi = function(handle) {\n  var cmd = new Buffer(6);\n\n  // header\n  cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n  cmd.writeUInt16LE(READ_RSSI_CMD, 1);\n\n  // length\n  cmd.writeUInt8(0x02, 3);\n\n  // data\n  cmd.writeUInt16LE(handle, 4); // handle\n\n  debug('read rssi - writing: ' + cmd.toString('hex'));\n  this._socket.write(cmd);\n};\n\nHci.prototype.writeAclDataPkt = function(handle, cid, data) {\n  var pkt = new Buffer(9 + data.length);\n\n  // header\n  pkt.writeUInt8(HCI_ACLDATA_PKT, 0);\n  pkt.writeUInt16LE(handle | ACL_START_NO_FLUSH << 12, 1);\n  pkt.writeUInt16LE(data.length + 4, 3); // data length 1\n  pkt.writeUInt16LE(data.length, 5); // data length 2\n  pkt.writeUInt16LE(cid, 7);\n\n  data.copy(pkt, 9);\n\n  debug('write acl data pkt - writing: ' + pkt.toString('hex'));\n  this._socket.write(pkt);\n};\n\nHci.prototype.onSocketData = function(data) {\n  debug('onSocketData: ' + data.toString('hex'));\n\n  var eventType = data.readUInt8(0);\n  var handle;\n\n  debug('\\tevent type = ' + eventType);\n\n  if (HCI_EVENT_PKT === eventType) {\n    var subEventType = data.readUInt8(1);\n\n    debug('\\tsub event type = ' + subEventType);\n\n    if (subEventType === EVT_DISCONN_COMPLETE) {\n      handle =  data.readUInt16LE(4);\n      var reason = data.readUInt8(6);\n\n      debug('\\t\\thandle = ' + handle);\n      debug('\\t\\treason = ' + reason);\n\n      this.emit('disconnComplete', handle, reason);\n    } else if (subEventType === EVT_ENCRYPT_CHANGE) {\n      handle =  data.readUInt16LE(4);\n      var encrypt = data.readUInt8(6);\n\n      debug('\\t\\thandle = ' + handle);\n      debug('\\t\\tencrypt = ' + encrypt);\n\n      this.emit('encryptChange', handle, encrypt);\n    } else if (subEventType === EVT_CMD_COMPLETE) {\n      var cmd = data.readUInt16LE(4);\n      var status = data.readUInt8(6);\n      var result = data.slice(7);\n\n      debug('\\t\\tcmd = ' + cmd);\n      debug('\\t\\tstatus = ' + status);\n      debug('\\t\\tresult = ' + result.toString('hex'));\n\n      this.processCmdCompleteEvent(cmd, status, result);\n    } else if (subEventType === EVT_LE_META_EVENT) {\n      var leMetaEventType = data.readUInt8(3);\n      var leMetaEventStatus = data.readUInt8(4);\n      var leMetaEventData = data.slice(5);\n\n      debug('\\t\\tLE meta event type = ' + leMetaEventType);\n      debug('\\t\\tLE meta event status = ' + leMetaEventStatus);\n      debug('\\t\\tLE meta event data = ' + leMetaEventData.toString('hex'));\n\n      this.processLeMetaEvent(leMetaEventType, leMetaEventStatus, leMetaEventData);\n    }\n  } else if (HCI_ACLDATA_PKT === eventType) {\n    var flags = data.readUInt16LE(1) >> 12;\n    handle = data.readUInt16LE(1) & 0x0fff;\n\n    if (ACL_START === flags) {\n      var cid = data.readUInt16LE(7);\n\n      var length = data.readUInt16LE(5);\n      var pktData = data.slice(9);\n\n      debug('\\t\\tcid = ' + cid);\n\n      if (length === pktData.length) {\n        debug('\\t\\thandle = ' + handle);\n        debug('\\t\\tdata = ' + pktData.toString('hex'));\n\n        this.emit('aclDataPkt', handle, cid, pktData);\n      } else {\n        this._handleBuffers[handle] = {\n          length: length,\n          cid: cid,\n          data: pktData\n        };\n      }\n    } else if (ACL_CONT === flags) {\n      if (!this._handleBuffers[handle] || !this._handleBuffers[handle].data) {\n        return;\n      }\n\n      this._handleBuffers[handle].data = Buffer.concat([\n        this._handleBuffers[handle].data,\n        data.slice(5)\n      ]);\n\n      if (this._handleBuffers[handle].data.length === this._handleBuffers[handle].length) {\n        this.emit('aclDataPkt', handle, this._handleBuffers[handle].cid, this._handleBuffers[handle].data);\n\n        delete this._handleBuffers[handle];\n      }\n    }\n  }\n};\n\nHci.prototype.onSocketError = function(error) {\n  debug('onSocketError: ' + error.message);\n\n  if (error.message === 'Operation not permitted') {\n    this.emit('stateChange', 'unauthorized');\n  } else if (error.message === 'Network is down') {\n    // no-op\n  }\n};\n\nHci.prototype.processCmdCompleteEvent = function(cmd, status, result) {\n  var handle;\n\n  if (cmd === RESET_CMD) {\n    this.setEventMask();\n    this.setLeEventMask();\n    this.readLocalVersion();\n    this.writeLeHostSupported();\n    this.readLeHostSupported();\n    this.readBdAddr();\n  } else if (cmd === READ_LE_HOST_SUPPORTED_CMD) {\n    if (status === 0) {\n      var le = result.readUInt8(0);\n      var simul = result.readUInt8(1);\n\n      debug('\\t\\t\\tle = ' + le);\n      debug('\\t\\t\\tsimul = ' + simul);\n    }\n  } else if (cmd === READ_LOCAL_VERSION_CMD) {\n    var hciVer = result.readUInt8(0);\n    var hciRev = result.readUInt16LE(1);\n    var lmpVer = result.readInt8(3);\n    var manufacturer = result.readUInt16LE(4);\n    var lmpSubVer = result.readUInt16LE(6);\n\n    if (hciVer < 0x06) {\n      this.emit('stateChange', 'unsupported');\n    } else if (this._state !== 'poweredOn') {\n      this.setAdvertiseEnable(false);\n      this.setAdvertisingParameters();\n    }\n\n    this.emit('readLocalVersion', hciVer, hciRev, lmpVer, manufacturer, lmpSubVer);\n  } else if (cmd === READ_BD_ADDR_CMD) {\n    this.addressType = 'public';\n    this.address = result.toString('hex').match(/.{1,2}/g).reverse().join(':');\n\n    debug('address = ' + this.address);\n\n    this.emit('addressChange', this.address);\n  } else if (cmd === LE_SET_ADVERTISING_PARAMETERS_CMD) {\n    this.emit('stateChange', 'poweredOn');\n\n    this.emit('leAdvertisingParametersSet', status);\n  } else if (cmd === LE_SET_ADVERTISING_DATA_CMD) {\n    this.emit('leAdvertisingDataSet', status);\n  } else if (cmd === LE_SET_SCAN_RESPONSE_DATA_CMD) {\n    this.emit('leScanResponseDataSet', status);\n  } else if (cmd === LE_SET_ADVERTISE_ENABLE_CMD) {\n    this.emit('leAdvertiseEnableSet', status);\n  } else if (cmd === READ_RSSI_CMD) {\n    handle = result.readUInt16LE(0);\n    var rssi = result.readInt8(2);\n\n    debug('\\t\\t\\thandle = ' + handle);\n    debug('\\t\\t\\trssi = ' + rssi);\n\n    this.emit('rssiRead', handle, rssi);\n  } else if (cmd === LE_LTK_NEG_REPLY_CMD) {\n    handle = result.readUInt16LE(0);\n\n    debug('\\t\\t\\thandle = ' + handle);\n    this.emit('leLtkNegReply', handle);\n  }\n};\n\nHci.prototype.processLeMetaEvent = function(eventType, status, data) {\n  if (eventType === EVT_LE_CONN_COMPLETE) {\n    this.processLeConnComplete(status, data);\n  } else if (eventType === EVT_LE_CONN_UPDATE_COMPLETE) {\n    this.processLeConnUpdateComplete(status, data);\n  }\n};\n\nHci.prototype.processLeConnComplete = function(status, data) {\n  var handle = data.readUInt16LE(0);\n  var role = data.readUInt8(2);\n  var addressType = data.readUInt8(3) === 0x01 ? 'random': 'public';\n  var address = data.slice(4, 10).toString('hex').match(/.{1,2}/g).reverse().join(':');\n  var interval = data.readUInt16LE(10) * 1.25;\n  var latency = data.readUInt16LE(12); // TODO: multiplier?\n  var supervisionTimeout = data.readUInt16LE(14) * 10;\n  var masterClockAccuracy = data.readUInt8(16); // TODO: multiplier?\n\n  debug('\\t\\t\\thandle = ' + handle);\n  debug('\\t\\t\\trole = ' + role);\n  debug('\\t\\t\\taddress type = ' + addressType);\n  debug('\\t\\t\\taddress = ' + address);\n  debug('\\t\\t\\tinterval = ' + interval);\n  debug('\\t\\t\\tlatency = ' + latency);\n  debug('\\t\\t\\tsupervision timeout = ' + supervisionTimeout);\n  debug('\\t\\t\\tmaster clock accuracy = ' + masterClockAccuracy);\n\n  this.emit('leConnComplete', status, handle, role, addressType, address, interval, latency, supervisionTimeout, masterClockAccuracy);\n};\n\nHci.prototype.processLeConnUpdateComplete = function(status, data) {\n  var handle = data.readUInt16LE(0);\n  var interval = data.readUInt16LE(2) * 1.25;\n  var latency = data.readUInt16LE(4); // TODO: multiplier?\n  var supervisionTimeout = data.readUInt16LE(6) * 10;\n\n  debug('\\t\\t\\thandle = ' + handle);\n  debug('\\t\\t\\tinterval = ' + interval);\n  debug('\\t\\t\\tlatency = ' + latency);\n  debug('\\t\\t\\tsupervision timeout = ' + supervisionTimeout);\n\n  this.emit('leConnUpdateComplete', status, handle, interval, latency, supervisionTimeout);\n};\n\nHci.prototype.onStateChange = function(state) {\n  this._state = state;\n};\n\nmodule.exports = Hci;\n","/home/travis/build/npmtest/node-npmtest-bleno/node_modules/bleno/lib/hci-socket/gap.js":"var debug = require('debug')('gap');\n\nvar events = require('events');\nvar os = require('os');\nvar util = require('util');\n\nvar Hci = require('./hci');\n\nvar isLinux = (os.platform() === 'linux');\nvar isIntelEdison = isLinux && (os.release().indexOf('edison') !== -1);\nvar isYocto = isLinux && (os.release().indexOf('yocto') !== -1);\n\nfunction Gap(hci) {\n  this._hci = hci;\n\n  this._advertiseState = null;\n\n  this._hci.on('error', this.onHciError.bind(this));\n\n  this._hci.on('leAdvertisingParametersSet', this.onHciLeAdvertisingParametersSet.bind(this));\n  this._hci.on('leAdvertisingDataSet', this.onHciLeAdvertisingDataSet.bind(this));\n  this._hci.on('leScanResponseDataSet', this.onHciLeScanResponseDataSet.bind(this));\n  this._hci.on('leAdvertiseEnableSet', this.onHciLeAdvertiseEnableSet.bind(this));\n}\n\nutil.inherits(Gap, events.EventEmitter);\n\nGap.prototype.startAdvertising = function(name, serviceUuids) {\n  debug('startAdvertising: name = ' + name + ', serviceUuids = ' + JSON.stringify(serviceUuids, null, 2));\n\n  var advertisementDataLength = 3;\n  var scanDataLength = 0;\n\n  var serviceUuids16bit = [];\n  var serviceUuids128bit = [];\n  var i = 0;\n\n  if (name && name.length) {\n    scanDataLength += 2 + name.length;\n  }\n\n  if (serviceUuids && serviceUuids.length) {\n    for (i = 0; i < serviceUuids.length; i++) {\n      var serviceUuid = new Buffer(serviceUuids[i].match(/.{1,2}/g).reverse().join(''), 'hex');\n\n      if (serviceUuid.length === 2) {\n        serviceUuids16bit.push(serviceUuid);\n      } else if (serviceUuid.length === 16) {\n        serviceUuids128bit.push(serviceUuid);\n      }\n    }\n  }\n\n  if (serviceUuids16bit.length) {\n    advertisementDataLength += 2 + 2 * serviceUuids16bit.length;\n  }\n\n  if (serviceUuids128bit.length) {\n    advertisementDataLength += 2 + 16 * serviceUuids128bit.length;\n  }\n\n  var advertisementData = new Buffer(advertisementDataLength);\n  var scanData = new Buffer(scanDataLength);\n\n  // flags\n  advertisementData.writeUInt8(2, 0);\n  advertisementData.writeUInt8(0x01, 1);\n  advertisementData.writeUInt8(0x06, 2);\n\n  var advertisementDataOffset = 3;\n\n  if (serviceUuids16bit.length) {\n    advertisementData.writeUInt8(1 + 2 * serviceUuids16bit.length, advertisementDataOffset);\n    advertisementDataOffset++;\n\n    advertisementData.writeUInt8(0x03, advertisementDataOffset);\n    advertisementDataOffset++;\n\n    for (i = 0; i < serviceUuids16bit.length; i++) {\n      serviceUuids16bit[i].copy(advertisementData, advertisementDataOffset);\n      advertisementDataOffset += serviceUuids16bit[i].length;\n    }\n  }\n\n  if (serviceUuids128bit.length) {\n    advertisementData.writeUInt8(1 + 16 * serviceUuids128bit.length, advertisementDataOffset);\n    advertisementDataOffset++;\n\n    advertisementData.writeUInt8(0x06, advertisementDataOffset);\n    advertisementDataOffset++;\n\n    for (i = 0; i < serviceUuids128bit.length; i++) {\n      serviceUuids128bit[i].copy(advertisementData, advertisementDataOffset);\n      advertisementDataOffset += serviceUuids128bit[i].length;\n    }\n  }\n\n  // name\n  if (name && name.length) {\n    var nameBuffer = new Buffer(name);\n\n    scanData.writeUInt8(1 + nameBuffer.length, 0);\n    scanData.writeUInt8(0x08, 1);\n    nameBuffer.copy(scanData, 2);\n  }\n\n  this.startAdvertisingWithEIRData(advertisementData, scanData);\n};\n\n\nGap.prototype.startAdvertisingIBeacon = function(data) {\n  debug('startAdvertisingIBeacon: data = ' + data.toString('hex'));\n\n  var dataLength = data.length;\n  var manufacturerDataLength = 4 + dataLength;\n  var advertisementDataLength = 5 + manufacturerDataLength;\n  var scanDataLength = 0;\n\n  var advertisementData = new Buffer(advertisementDataLength);\n  var scanData = new Buffer(0);\n\n  // flags\n  advertisementData.writeUInt8(2, 0);\n  advertisementData.writeUInt8(0x01, 1);\n  advertisementData.writeUInt8(0x06, 2);\n\n  advertisementData.writeUInt8(manufacturerDataLength + 1, 3);\n  advertisementData.writeUInt8(0xff, 4);\n  advertisementData.writeUInt16LE(0x004c, 5); // Apple Company Identifier LE (16 bit)\n  advertisementData.writeUInt8(0x02, 7); // type, 2 => iBeacon\n  advertisementData.writeUInt8(dataLength, 8);\n\n  data.copy(advertisementData, 9);\n\n  this.startAdvertisingWithEIRData(advertisementData, scanData);\n};\n\nGap.prototype.startAdvertisingWithEIRData = function(advertisementData, scanData) {\n  advertisementData = advertisementData || new Buffer(0);\n  scanData = scanData || new Buffer(0);\n\n  debug('startAdvertisingWithEIRData: advertisement data = ' + advertisementData.toString('hex') + ', scan data = ' + scanData.toString('hex'));\n\n  var error = null;\n\n  if (advertisementData.length > 31) {\n    error = new Error('Advertisement data is over maximum limit of 31 bytes');\n  } else if (scanData.length > 31) {\n    error = new Error('Scan data is over maximum limit of 31 bytes');\n  }\n\n  if (error) {\n    this.emit('advertisingStart', error);\n  } else {\n    this._advertiseState = 'starting';\n\n    if (isIntelEdison || isYocto) {\n      // work around for Intel Edison\n      debug('skipping first set of scan response and advertisement data');\n    } else {\n      this._hci.setScanResponseData(scanData);\n      this._hci.setAdvertisingData(advertisementData);\n    }\n    this._hci.setAdvertiseEnable(true);\n    this._hci.setScanResponseData(scanData);\n    this._hci.setAdvertisingData(advertisementData);\n  }\n};\n\nGap.prototype.restartAdvertising = function() {\n  this._advertiseState = 'restarting';\n\n  this._hci.setAdvertiseEnable(true);\n};\n\nGap.prototype.stopAdvertising = function() {\n  this._advertiseState = 'stopping';\n\n  this._hci.setAdvertiseEnable(false);\n};\n\nGap.prototype.onHciError = function(error) {\n};\n\nGap.prototype.onHciLeAdvertisingParametersSet = function(status) {\n};\n\nGap.prototype.onHciLeAdvertisingDataSet = function(status) {\n};\n\nGap.prototype.onHciLeScanResponseDataSet = function(status) {\n};\n\nGap.prototype.onHciLeAdvertiseEnableSet = function(status) {\n  if (this._advertiseState === 'starting') {\n    this._advertiseState = 'started';\n\n    var error = null;\n\n    if (status) {\n      error = new Error(Hci.STATUS_MAPPER[status] || ('Unknown (' + status + ')'));\n    }\n\n    this.emit('advertisingStart', error);\n  } else if (this._advertiseState === 'stopping') {\n    this._advertiseState = 'stopped';\n\n    this.emit('advertisingStop');\n  }\n};\n\nmodule.exports = Gap;\n","/home/travis/build/npmtest/node-npmtest-bleno/node_modules/bleno/lib/hci-socket/gatt.js":"/*jshint loopfunc: true */\n\nvar debug = require('debug')('gatt');\n\nvar events = require('events');\nvar os = require('os');\nvar util = require('util');\n\nvar ATT_OP_ERROR                    = 0x01;\nvar ATT_OP_MTU_REQ                  = 0x02;\nvar ATT_OP_MTU_RESP                 = 0x03;\nvar ATT_OP_FIND_INFO_REQ            = 0x04;\nvar ATT_OP_FIND_INFO_RESP           = 0x05;\nvar ATT_OP_FIND_BY_TYPE_REQ         = 0x06;\nvar ATT_OP_FIND_BY_TYPE_RESP        = 0x07;\nvar ATT_OP_READ_BY_TYPE_REQ         = 0x08;\nvar ATT_OP_READ_BY_TYPE_RESP        = 0x09;\nvar ATT_OP_READ_REQ                 = 0x0a;\nvar ATT_OP_READ_RESP                = 0x0b;\nvar ATT_OP_READ_BLOB_REQ            = 0x0c;\nvar ATT_OP_READ_BLOB_RESP           = 0x0d;\nvar ATT_OP_READ_MULTI_REQ           = 0x0e;\nvar ATT_OP_READ_MULTI_RESP          = 0x0f;\nvar ATT_OP_READ_BY_GROUP_REQ        = 0x10;\nvar ATT_OP_READ_BY_GROUP_RESP       = 0x11;\nvar ATT_OP_WRITE_REQ                = 0x12;\nvar ATT_OP_WRITE_RESP               = 0x13;\nvar ATT_OP_WRITE_CMD                = 0x52;\nvar ATT_OP_PREP_WRITE_REQ           = 0x16;\nvar ATT_OP_PREP_WRITE_RESP          = 0x17;\nvar ATT_OP_EXEC_WRITE_REQ           = 0x18;\nvar ATT_OP_EXEC_WRITE_RESP          = 0x19;\nvar ATT_OP_HANDLE_NOTIFY            = 0x1b;\nvar ATT_OP_HANDLE_IND               = 0x1d;\nvar ATT_OP_HANDLE_CNF               = 0x1e;\nvar ATT_OP_SIGNED_WRITE_CMD         = 0xd2;\n\nvar GATT_PRIM_SVC_UUID              = 0x2800;\nvar GATT_INCLUDE_UUID               = 0x2802;\nvar GATT_CHARAC_UUID                = 0x2803;\n\nvar GATT_CLIENT_CHARAC_CFG_UUID     = 0x2902;\nvar GATT_SERVER_CHARAC_CFG_UUID     = 0x2903;\n\nvar ATT_ECODE_SUCCESS               = 0x00;\nvar ATT_ECODE_INVALID_HANDLE        = 0x01;\nvar ATT_ECODE_READ_NOT_PERM         = 0x02;\nvar ATT_ECODE_WRITE_NOT_PERM        = 0x03;\nvar ATT_ECODE_INVALID_PDU           = 0x04;\nvar ATT_ECODE_AUTHENTICATION        = 0x05;\nvar ATT_ECODE_REQ_NOT_SUPP          = 0x06;\nvar ATT_ECODE_INVALID_OFFSET        = 0x07;\nvar ATT_ECODE_AUTHORIZATION         = 0x08;\nvar ATT_ECODE_PREP_QUEUE_FULL       = 0x09;\nvar ATT_ECODE_ATTR_NOT_FOUND        = 0x0a;\nvar ATT_ECODE_ATTR_NOT_LONG         = 0x0b;\nvar ATT_ECODE_INSUFF_ENCR_KEY_SIZE  = 0x0c;\nvar ATT_ECODE_INVAL_ATTR_VALUE_LEN  = 0x0d;\nvar ATT_ECODE_UNLIKELY              = 0x0e;\nvar ATT_ECODE_INSUFF_ENC            = 0x0f;\nvar ATT_ECODE_UNSUPP_GRP_TYPE       = 0x10;\nvar ATT_ECODE_INSUFF_RESOURCES      = 0x11;\n\nvar ATT_CID = 0x0004;\n\nvar Gatt = function() {\n  this.maxMtu = 256;\n  this._mtu = 23;\n  this._preparedWriteRequest = null;\n\n  this.setServices([]);\n\n  this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\n  this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\n};\n\nutil.inherits(Gatt, events.EventEmitter);\n\nGatt.prototype.setServices = function(services) {\n  var deviceName = process.env.BLENO_DEVICE_NAME || os.hostname();\n\n  // base services and characteristics\n  var allServices = [\n    {\n      uuid: '1800',\n      characteristics: [\n        {\n          uuid: '2a00',\n          properties: ['read'],\n          secure: [],\n          value: new Buffer(deviceName),\n          descriptors: []\n        },\n        {\n          uuid: '2a01',\n          properties: ['read'],\n          secure: [],\n          value: new Buffer([0x80, 0x00]),\n          descriptors: []\n        }\n      ]\n    },\n    {\n      uuid: '1801',\n      characteristics: [\n        {\n          uuid: '2a05',\n          properties: ['indicate'],\n          secure: [],\n          value: new Buffer([0x00, 0x00, 0x00, 0x00]),\n          descriptors: []\n        }\n      ]\n    }\n  ].concat(services);\n\n  this._handles = [];\n\n  var handle = 0;\n  var i;\n  var j;\n\n  for (i = 0; i < allServices.length; i++) {\n    var service = allServices[i];\n\n    handle++;\n    var serviceHandle = handle;\n\n    this._handles[serviceHandle] = {\n      type: 'service',\n      uuid: service.uuid,\n      attribute: service,\n      startHandle: serviceHandle\n      // endHandle filled in below\n    };\n\n    for (j = 0; j < service.characteristics.length; j++) {\n      var characteristic = service.characteristics[j];\n\n      var properties = 0;\n      var secure = 0;\n\n      if (characteristic.properties.indexOf('read') !== -1) {\n        properties |= 0x02;\n\n        if (characteristic.secure.indexOf('read') !== -1) {\n          secure |= 0x02;\n        }\n      }\n\n      if (characteristic.properties.indexOf('writeWithoutResponse') !== -1) {\n        properties |= 0x04;\n\n        if (characteristic.secure.indexOf('writeWithoutResponse') !== -1) {\n          secure |= 0x04;\n        }\n      }\n\n      if (characteristic.properties.indexOf('write') !== -1) {\n        properties |= 0x08;\n\n        if (characteristic.secure.indexOf('write') !== -1) {\n          secure |= 0x08;\n        }\n      }\n\n      if (characteristic.properties.indexOf('notify') !== -1) {\n        properties |= 0x10;\n\n        if (characteristic.secure.indexOf('notify') !== -1) {\n          secure |= 0x10;\n        }\n      }\n\n      if (characteristic.properties.indexOf('indicate') !== -1) {\n        properties |= 0x20;\n\n        if (characteristic.secure.indexOf('indicate') !== -1) {\n          secure |= 0x20;\n        }\n      }\n\n      handle++;\n      var characteristicHandle = handle;\n\n      handle++;\n      var characteristicValueHandle = handle;\n\n      this._handles[characteristicHandle] = {\n        type: 'characteristic',\n        uuid: characteristic.uuid,\n        properties: properties,\n        secure: secure,\n        attribute: characteristic,\n        startHandle: characteristicHandle,\n        valueHandle: characteristicValueHandle\n      };\n\n      this._handles[characteristicValueHandle] = {\n        type: 'characteristicValue',\n        handle: characteristicValueHandle,\n        value: characteristic.value\n      };\n\n      if (properties & 0x30) { // notify or indicate\n        // add client characteristic configuration descriptor\n\n        handle++;\n        var clientCharacteristicConfigurationDescriptorHandle = handle;\n        this._handles[clientCharacteristicConfigurationDescriptorHandle] = {\n          type: 'descriptor',\n          handle: clientCharacteristicConfigurationDescriptorHandle,\n          uuid: '2902',\n          attribute: characteristic,\n          properties: (0x02 | 0x04 | 0x08), // read/write\n          secure: (secure & 0x10) ? (0x02 | 0x04 | 0x08) : 0,\n          value: new Buffer([0x00, 0x00])\n        };\n      }\n\n      for (var k = 0; k < characteristic.descriptors.length; k++) {\n        var descriptor = characteristic.descriptors[k];\n\n        handle++;\n        var descriptorHandle = handle;\n\n        this._handles[descriptorHandle] = {\n          type: 'descriptor',\n          handle: descriptorHandle,\n          uuid: descriptor.uuid,\n          attribute: descriptor,\n          properties: 0x02, // read only\n          secure: 0x00,\n          value: descriptor.value\n        };\n      }\n    }\n\n    this._handles[serviceHandle].endHandle = handle;\n  }\n\n  var debugHandles = [];\n  for (i = 0; i < this._handles.length; i++) {\n    handle = this._handles[i];\n\n    debugHandles[i] = {};\n    for(j in handle) {\n      if (Buffer.isBuffer(handle[j])) {\n        debugHandles[i][j] = handle[j] ? 'Buffer(\\'' + handle[j].toString('hex') + '\\', \\'hex\\')' : null;\n      } else if (j !== 'attribute') {\n        debugHandles[i][j] = handle[j];\n      }\n    }\n  }\n\n  debug('handles = ' + JSON.stringify(debugHandles, null, 2));\n};\n\nGatt.prototype.setAclStream = function(aclStream) {\n  this._mtu = 23;\n  this._preparedWriteRequest = null;\n\n  this._aclStream = aclStream;\n\n  this._aclStream.on('data', this.onAclStreamDataBinded);\n  this._aclStream.on('end', this.onAclStreamEndBinded);\n};\n\nGatt.prototype.onAclStreamData = function(cid, data) {\n  if (cid !== ATT_CID) {\n    return;\n  }\n\n  this.handleRequest(data);\n};\n\nGatt.prototype.onAclStreamEnd = function() {\n  this._aclStream.removeListener('data', this.onAclStreamDataBinded);\n  this._aclStream.removeListener('end', this.onAclStreamEndBinded);\n\n  for (var i = 0; i < this._handles.length; i++) {\n    if (this._handles[i] && this._handles[i].type === 'descriptor' &&\n        this._handles[i].uuid === '2902' && this._handles[i].value.readUInt16LE(0) !== 0) {\n\n      this._handles[i].value = new Buffer([0x00, 0x00]);\n\n      if (this._handles[i].attribute && this._handles[i].attribute.emit) {\n        this._handles[i].attribute.emit('unsubscribe');\n      }\n    }\n  }\n};\n\nGatt.prototype.send = function(data) {\n  debug('send: ' + data.toString('hex'));\n  this._aclStream.write(ATT_CID, data);\n};\n\nGatt.prototype.errorResponse = function(opcode, handle, status) {\n  var buf = new Buffer(5);\n\n  buf.writeUInt8(ATT_OP_ERROR, 0);\n  buf.writeUInt8(opcode, 1);\n  buf.writeUInt16LE(handle, 2);\n  buf.writeUInt8(status, 4);\n\n  return buf;\n};\n\nGatt.prototype.handleRequest = function(request) {\n  debug('handing request: ' + request.toString('hex'));\n\n  var requestType = request[0];\n  var response = null;\n\n  switch(requestType) {\n    case ATT_OP_MTU_REQ:\n      response = this.handleMtuRequest(request);\n      break;\n\n    case ATT_OP_FIND_INFO_REQ:\n      response = this.handleFindInfoRequest(request);\n      break;\n\n    case ATT_OP_FIND_BY_TYPE_REQ:\n      response = this.handleFindByTypeRequest(request);\n      break;\n\n    case ATT_OP_READ_BY_TYPE_REQ:\n      response = this.handleReadByTypeRequest(request);\n      break;\n\n    case ATT_OP_READ_REQ:\n    case ATT_OP_READ_BLOB_REQ:\n      response = this.handleReadOrReadBlobRequest(request);\n      break;\n\n    case ATT_OP_READ_BY_GROUP_REQ:\n      response = this.handleReadByGroupRequest(request);\n      break;\n\n    case ATT_OP_WRITE_REQ:\n    case ATT_OP_WRITE_CMD:\n      response = this.handleWriteRequestOrCommand(request);\n      break;\n\n    case ATT_OP_PREP_WRITE_REQ:\n      response = this.handlePrepareWriteRequest(request);\n      break;\n\n    case ATT_OP_EXEC_WRITE_REQ:\n      response = this.handleExecuteWriteRequest(request);\n      break;\n\n    case ATT_OP_HANDLE_CNF:\n      response = this.handleConfirmation(request);\n      break;\n\n    default:\n    case ATT_OP_READ_MULTI_REQ:\n    case ATT_OP_SIGNED_WRITE_CMD:\n      response = this.errorResponse(requestType, 0x0000, ATT_ECODE_REQ_NOT_SUPP);\n      break;\n  }\n\n  if (response) {\n    debug('response: ' + response.toString('hex'));\n\n    this.send(response);\n  }\n};\n\nGatt.prototype.handleMtuRequest = function(request) {\n  var mtu = request.readUInt16LE(1);\n\n  if (mtu < 23) {\n    mtu = 23;\n  } else if (mtu > this.maxMtu) {\n    mtu = this.maxMtu;\n  }\n\n  this._mtu = mtu;\n\n  this.emit('mtuChange', this._mtu);\n\n  var response = new Buffer(3);\n\n  response.writeUInt8(ATT_OP_MTU_RESP, 0);\n  response.writeUInt16LE(mtu, 1);\n\n  return response;\n};\n\nGatt.prototype.handleFindInfoRequest = function(request) {\n  var response = null;\n\n  var startHandle = request.readUInt16LE(1);\n  var endHandle = request.readUInt16LE(3);\n\n  var infos = [];\n  var uuid = null;\n  var i;\n\n  for (i = startHandle; i <= endHandle; i++) {\n    var handle = this._handles[i];\n\n    if (!handle) {\n      break;\n    }\n\n    uuid = null;\n\n    if ('service' === handle.type) {\n      uuid = '2800';\n    } else if ('includedService' === handle.type) {\n      uuid = '2802';\n    } else if ('characteristic' === handle.type) {\n      uuid = '2803';\n    } else if ('characteristicValue' === handle.type) {\n      uuid = this._handles[i - 1].uuid;\n    } else if ('descriptor' === handle.type) {\n      uuid = handle.uuid;\n    }\n\n    if (uuid) {\n      infos.push({\n        handle: i,\n        uuid: uuid\n      });\n    }\n  }\n\n  if (infos.length) {\n    var uuidSize = infos[0].uuid.length / 2;\n    var numInfo = 1;\n\n    for (i = 1; i < infos.length; i++) {\n      if (infos[0].uuid.length !== infos[i].uuid.length) {\n        break;\n      }\n      numInfo++;\n    }\n\n    var lengthPerInfo = (uuidSize === 2) ? 4 : 18;\n    var maxInfo = Math.floor((this._mtu - 2) / lengthPerInfo);\n    numInfo = Math.min(numInfo, maxInfo);\n\n    response = new Buffer(2 + numInfo * lengthPerInfo);\n\n    response[0] = ATT_OP_FIND_INFO_RESP;\n    response[1] = (uuidSize === 2) ? 0x01 : 0x2;\n\n    for (i = 0; i < numInfo; i++) {\n      var info = infos[i];\n\n      response.writeUInt16LE(info.handle, 2 + i * lengthPerInfo);\n\n      uuid = new Buffer(info.uuid.match(/.{1,2}/g).reverse().join(''), 'hex');\n      for (var j = 0; j < uuid.length; j++) {\n        response[2 + i * lengthPerInfo + 2 + j] = uuid[j];\n      }\n    }\n  } else {\n    response = this.errorResponse(ATT_OP_FIND_INFO_REQ, startHandle, ATT_ECODE_ATTR_NOT_FOUND);\n  }\n\n  return response;\n};\n\nGatt.prototype.handleFindByTypeRequest = function(request) {\n  var response = null;\n\n  var startHandle = request.readUInt16LE(1);\n  var endHandle = request.readUInt16LE(3);\n  var uuid = request.slice(5, 7).toString('hex').match(/.{1,2}/g).reverse().join('');\n  var value = request.slice(7).toString('hex').match(/.{1,2}/g).reverse().join('');\n\n  var handles = [];\n  var handle;\n\n  for (var i = startHandle; i <= endHandle; i++) {\n    handle = this._handles[i];\n\n    if (!handle) {\n      break;\n    }\n\n    if ('2800' === uuid && handle.type === 'service' && handle.uuid === value) {\n      handles.push({\n        start: handle.startHandle,\n        end: handle.endHandle\n      });\n    }\n  }\n\n  if (handles.length) {\n    var lengthPerHandle = 4;\n    var numHandles = handles.length;\n    var maxHandles = Math.floor((this._mtu - 1) / lengthPerHandle);\n\n    numHandles = Math.min(numHandles, maxHandles);\n\n    response = new Buffer(1 + numHandles * lengthPerHandle);\n\n    response[0] = ATT_OP_FIND_BY_TYPE_RESP;\n\n    for (i = 0; i < numHandles; i++) {\n      handle = handles[i];\n\n      response.writeUInt16LE(handle.start, 1 + i * lengthPerHandle);\n      response.writeUInt16LE(handle.end, 1 + i * lengthPerHandle + 2);\n    }\n  } else {\n    response = this.errorResponse(ATT_OP_FIND_BY_TYPE_REQ, startHandle, ATT_ECODE_ATTR_NOT_FOUND);\n  }\n\n  return response;\n};\n\nGatt.prototype.handleReadByGroupRequest = function(request) {\n  var response = null;\n\n  var startHandle = request.readUInt16LE(1);\n  var endHandle = request.readUInt16LE(3);\n  var uuid = request.slice(5).toString('hex').match(/.{1,2}/g).reverse().join('');\n\n  debug('read by group: startHandle = 0x' + startHandle.toString(16) + ', endHandle = 0x' + endHandle.toString(16) + ', uuid = 0x' + uuid.toString(16));\n\n  if ('2800' === uuid || '2802' === uuid) {\n    var services = [];\n    var type = ('2800' === uuid) ? 'service' : 'includedService';\n    var i;\n\n    for (i = startHandle; i <= endHandle; i++) {\n      var handle = this._handles[i];\n\n      if (!handle) {\n        break;\n      }\n\n      if (handle.type === type) {\n        services.push(handle);\n      }\n    }\n\n    if (services.length) {\n      var uuidSize = services[0].uuid.length / 2;\n      var numServices = 1;\n\n      for (i = 1; i < services.length; i++) {\n        if (services[0].uuid.length !== services[i].uuid.length) {\n          break;\n        }\n        numServices++;\n      }\n\n      var lengthPerService = (uuidSize === 2) ? 6 : 20;\n      var maxServices = Math.floor((this._mtu - 2) / lengthPerService);\n      numServices = Math.min(numServices, maxServices);\n\n      response = new Buffer(2 + numServices * lengthPerService);\n\n      response[0] = ATT_OP_READ_BY_GROUP_RESP;\n      response[1] = lengthPerService;\n\n      for (i = 0; i < numServices; i++) {\n        var service = services[i];\n\n        response.writeUInt16LE(service.startHandle, 2 + i * lengthPerService);\n        response.writeUInt16LE(service.endHandle, 2 + i * lengthPerService + 2);\n\n        var serviceUuid = new Buffer(service.uuid.match(/.{1,2}/g).reverse().join(''), 'hex');\n        for (var j = 0; j < serviceUuid.length; j++) {\n          response[2 + i * lengthPerService + 4 + j] = serviceUuid[j];\n        }\n      }\n    } else {\n      response = this.errorResponse(ATT_OP_READ_BY_GROUP_REQ, startHandle, ATT_ECODE_ATTR_NOT_FOUND);\n    }\n  } else {\n    response = this.errorResponse(ATT_OP_READ_BY_GROUP_REQ, startHandle, ATT_ECODE_UNSUPP_GRP_TYPE);\n  }\n\n  return response;\n};\n\nGatt.prototype.handleReadByTypeRequest = function(request) {\n  var response = null;\n  var requestType = request[0];\n\n  var startHandle = request.readUInt16LE(1);\n  var endHandle = request.readUInt16LE(3);\n  var uuid = request.slice(5).toString('hex').match(/.{1,2}/g).reverse().join('');\n  var i;\n  var handle;\n\n  debug('read by type: startHandle = 0x' + startHandle.toString(16) + ', endHandle = 0x' + endHandle.toString(16) + ', uuid = 0x' + uuid.toString(16));\n\n  if ('2803' === uuid) {\n    var characteristics = [];\n\n    for (i = startHandle; i <= endHandle; i++) {\n      handle = this._handles[i];\n\n      if (!handle) {\n        break;\n      }\n\n      if (handle.type === 'characteristic') {\n        characteristics.push(handle);\n      }\n    }\n\n    if (characteristics.length) {\n      var uuidSize = characteristics[0].uuid.length / 2;\n      var numCharacteristics = 1;\n\n      for (i = 1; i < characteristics.length; i++) {\n        if (characteristics[0].uuid.length !== characteristics[i].uuid.length) {\n          break;\n        }\n        numCharacteristics++;\n      }\n\n      var lengthPerCharacteristic = (uuidSize === 2) ? 7 : 21;\n      var maxCharacteristics = Math.floor((this._mtu - 2) / lengthPerCharacteristic);\n      numCharacteristics = Math.min(numCharacteristics, maxCharacteristics);\n\n      response = new Buffer(2 + numCharacteristics * lengthPerCharacteristic);\n\n      response[0] = ATT_OP_READ_BY_TYPE_RESP;\n      response[1] = lengthPerCharacteristic;\n\n      for (i = 0; i < numCharacteristics; i++) {\n        var characteristic = characteristics[i];\n\n        response.writeUInt16LE(characteristic.startHandle, 2 + i * lengthPerCharacteristic);\n        response.writeUInt8(characteristic.properties, 2 + i * lengthPerCharacteristic + 2);\n        response.writeUInt16LE(characteristic.valueHandle, 2 + i * lengthPerCharacteristic + 3);\n\n        var characteristicUuid = new Buffer(characteristic.uuid.match(/.{1,2}/g).reverse().join(''), 'hex');\n        for (var j = 0; j < characteristicUuid.length; j++) {\n          response[2 + i * lengthPerCharacteristic + 5 + j] = characteristicUuid[j];\n        }\n      }\n    } else {\n      response = this.errorResponse(ATT_OP_READ_BY_TYPE_REQ, startHandle, ATT_ECODE_ATTR_NOT_FOUND);\n    }\n  } else {\n    var handleAttribute = null;\n    var valueHandle = null;\n    var secure = false;\n\n    for (i = startHandle; i <= endHandle; i++) {\n      handle = this._handles[i];\n\n      if (!handle) {\n        break;\n      }\n\n      if (handle.type === 'characteristic' && handle.uuid === uuid) {\n        handleAttribute = handle.attribute;\n        valueHandle = handle.valueHandle;\n        secure = handle.secure & 0x02;\n        break;\n      } else if (handle.type === 'descriptor' && handle.uuid === uuid) {\n        valueHandle = i;\n        secure = handle.secure & 0x02;\n        break;\n      }\n    }\n\n    if (secure && !this._aclStream.encrypted) {\n      response = this.errorResponse(ATT_OP_READ_BY_TYPE_REQ, startHandle, ATT_ECODE_AUTHENTICATION);\n    } else if (valueHandle) {\n      var callback = (function(valueHandle) {\n        return function(result, data) {\n          var callbackResponse = null;\n\n          if (ATT_ECODE_SUCCESS === result) {\n            var dataLength = Math.min(data.length, this._mtu - 4);\n            callbackResponse = new Buffer(4 + dataLength);\n\n            callbackResponse[0] = ATT_OP_READ_BY_TYPE_RESP;\n            callbackResponse[1] = dataLength + 2;\n            callbackResponse.writeUInt16LE(valueHandle, 2);\n            for (i = 0; i < dataLength; i++) {\n              callbackResponse[4 + i] = data[i];\n            }\n          } else {\n            callbackResponse = this.errorResponse(requestType, valueHandle, result);\n          }\n\n          debug('read by type response: ' + callbackResponse.toString('hex'));\n\n          this.send(callbackResponse);\n        }.bind(this);\n      }.bind(this))(valueHandle);\n\n      var data = this._handles[valueHandle].value;\n\n      if (data) {\n        callback(ATT_ECODE_SUCCESS, data);\n      } else if (handleAttribute) {\n        handleAttribute.emit('readRequest', 0, callback);\n      } else {\n        callback(ATT_ECODE_UNLIKELY);\n      }\n    } else {\n      response = this.errorResponse(ATT_OP_READ_BY_TYPE_REQ, startHandle, ATT_ECODE_ATTR_NOT_FOUND);\n    }\n  }\n\n  return response;\n};\n\nGatt.prototype.handleReadOrReadBlobRequest = function(request) {\n  var response = null;\n\n  var requestType = request[0];\n  var valueHandle = request.readUInt16LE(1);\n  var offset = (requestType === ATT_OP_READ_BLOB_REQ) ? request.readUInt16LE(3) : 0;\n\n  var handle = this._handles[valueHandle];\n  var i;\n\n  if (handle) {\n    var result = null;\n    var data = null;\n    var handleType = handle.type;\n\n    var callback = (function(requestType, valueHandle) {\n      return function(result, data) {\n        var callbackResponse = null;\n\n        if (ATT_ECODE_SUCCESS === result) {\n          var dataLength = Math.min(data.length, this._mtu - 1);\n          callbackResponse = new Buffer(1 + dataLength);\n\n          callbackResponse[0] = (requestType === ATT_OP_READ_BLOB_REQ) ? ATT_OP_READ_BLOB_RESP : ATT_OP_READ_RESP;\n          for (i = 0; i < dataLength; i++) {\n            callbackResponse[1 + i] = data[i];\n          }\n        } else {\n          callbackResponse = this.errorResponse(requestType, valueHandle, result);\n        }\n\n        debug('read response: ' + callbackResponse.toString('hex'));\n\n        this.send(callbackResponse);\n      }.bind(this);\n    }.bind(this))(requestType, valueHandle);\n\n    if (handleType === 'service' || handleType === 'includedService') {\n      result = ATT_ECODE_SUCCESS;\n      data = new Buffer(handle.uuid.match(/.{1,2}/g).reverse().join(''), 'hex');\n    } else if (handleType === 'characteristic') {\n      var uuid = new Buffer(handle.uuid.match(/.{1,2}/g).reverse().join(''), 'hex');\n\n      result = ATT_ECODE_SUCCESS;\n      data = new Buffer(3 + uuid.length);\n      data.writeUInt8(handle.properties, 0);\n      data.writeUInt16LE(handle.valueHandle, 1);\n\n      for (i = 0; i < uuid.length; i++) {\n        data[i + 3] = uuid[i];\n      }\n    } else if (handleType === 'characteristicValue' || handleType === 'descriptor') {\n      var handleProperties = handle.properties;\n      var handleSecure = handle.secure;\n      var handleAttribute = handle.attribute;\n      if (handleType === 'characteristicValue') {\n        handleProperties = this._handles[valueHandle - 1].properties;\n        handleSecure = this._handles[valueHandle - 1].secure;\n        handleAttribute = this._handles[valueHandle - 1].attribute;\n      }\n\n      if (handleProperties & 0x02) {\n        if (handleSecure & 0x02 && !this._aclStream.encrypted) {\n          result = ATT_ECODE_AUTHENTICATION;\n        } else {\n          data = handle.value;\n\n          if (data) {\n            result = ATT_ECODE_SUCCESS;\n          } else {\n            handleAttribute.emit('readRequest', offset, callback);\n          }\n        }\n      } else {\n        result = ATT_ECODE_READ_NOT_PERM; // non-readable\n      }\n    }\n\n    if (data && typeof data === 'string') {\n      data = new Buffer(data);\n    }\n\n    if (result === ATT_ECODE_SUCCESS && data && offset) {\n      if (data.length < offset) {\n        result = ATT_ECODE_INVALID_OFFSET;\n        data = null;\n      } else {\n        data = data.slice(offset);\n      }\n    }\n\n    if (result !== null) {\n      callback(result, data);\n    }\n  } else {\n    response = this.errorResponse(requestType, valueHandle, ATT_ECODE_INVALID_HANDLE);\n  }\n\n  return response;\n};\n\nGatt.prototype.handleWriteRequestOrCommand = function(request) {\n  var response = null;\n\n  var requestType = request[0];\n  var withoutResponse = (requestType === ATT_OP_WRITE_CMD);\n  var valueHandle = request.readUInt16LE(1);\n  var data = request.slice(3);\n  var offset = 0;\n\n  var handle = this._handles[valueHandle];\n\n  if (handle) {\n    if (handle.type === 'characteristicValue') {\n      handle = this._handles[valueHandle - 1];\n    }\n\n    var handleProperties = handle.properties;\n    var handleSecure = handle.secure;\n\n    if (handleProperties && (withoutResponse ? (handleProperties & 0x04) : (handleProperties & 0x08))) {\n\n      var callback = (function(requestType, valueHandle, withoutResponse) {\n        return function(result) {\n          if (!withoutResponse) {\n            var callbackResponse = null;\n\n            if (ATT_ECODE_SUCCESS === result) {\n              callbackResponse = new Buffer([ATT_OP_WRITE_RESP]);\n            } else {\n              callbackResponse = this.errorResponse(requestType, valueHandle, result);\n            }\n\n            debug('write response: ' + callbackResponse.toString('hex'));\n\n            this.send(callbackResponse);\n          }\n        }.bind(this);\n      }.bind(this))(requestType, valueHandle, withoutResponse);\n\n      if (handleSecure & (withoutResponse ? 0x04 : 0x08) && !this._aclStream.encrypted) {\n        response = this.errorResponse(requestType, valueHandle, ATT_ECODE_AUTHENTICATION);\n      } else if (handle.type === 'descriptor' || handle.uuid === '2902') {\n        var result = null;\n\n        if (data.length !== 2) {\n          result = ATT_ECODE_INVAL_ATTR_VALUE_LEN;\n        } else {\n          var value = data.readUInt16LE(0);\n          var handleAttribute = handle.attribute;\n\n          handle.value = data;\n\n          if (value & 0x0003) {\n            var updateValueCallback = (function(valueHandle, attribute) {\n              return function(data) {\n                var dataLength = Math.min(data.length, this._mtu - 3);\n                var useNotify = attribute.properties.indexOf('notify') !== -1;\n                var useIndicate = attribute.properties.indexOf('indicate') !== -1;\n                var i;\n\n                if (useNotify) {\n                  var notifyMessage = new Buffer(3 + dataLength);\n\n                  notifyMessage.writeUInt8(ATT_OP_HANDLE_NOTIFY, 0);\n                  notifyMessage.writeUInt16LE(valueHandle, 1);\n\n                  for (i = 0; i < dataLength; i++) {\n                    notifyMessage[3 + i] = data[i];\n                  }\n\n                  debug('notify message: ' + notifyMessage.toString('hex'));\n                  this.send(notifyMessage);\n\n                  attribute.emit('notify');\n                } else if (useIndicate) {\n                  var indicateMessage = new Buffer(3 + dataLength);\n\n                  indicateMessage.writeUInt8(ATT_OP_HANDLE_IND, 0);\n                  indicateMessage.writeUInt16LE(valueHandle, 1);\n\n                  for (i = 0; i < dataLength; i++) {\n                    indicateMessage[3 + i] = data[i];\n                  }\n\n                  this._lastIndicatedAttribute = attribute;\n\n                  debug('indicate message: ' + indicateMessage.toString('hex'));\n                  this.send(indicateMessage);\n                }\n              }.bind(this);\n            }.bind(this))(valueHandle - 1, handleAttribute);\n\n            if (handleAttribute.emit) {\n              handleAttribute.emit('subscribe', this._mtu - 3, updateValueCallback);\n            }\n          } else {\n            handleAttribute.emit('unsubscribe');\n          }\n\n          result = ATT_ECODE_SUCCESS;\n        }\n\n        callback(result);\n      } else {\n        handle.attribute.emit('writeRequest', data, offset, withoutResponse, callback);\n      }\n    } else {\n      response = this.errorResponse(requestType, valueHandle, ATT_ECODE_WRITE_NOT_PERM);\n    }\n  } else {\n    response = this.errorResponse(requestType, valueHandle, ATT_ECODE_INVALID_HANDLE);\n  }\n\n  return response;\n};\n\nGatt.prototype.handlePrepareWriteRequest = function(request) {\n  var response = null;\n\n  var requestType = request[0];\n  var valueHandle = request.readUInt16LE(1);\n  var offset = request.readUInt16LE(3);\n  var data = request.slice(5);\n\n  var handle = this._handles[valueHandle];\n\n  if (handle) {\n    if (handle.type === 'characteristicValue') {\n      handle = this._handles[valueHandle - 1];\n\n      var handleProperties = handle.properties;\n      var handleSecure = handle.secure;\n\n      if (handleProperties && (handleProperties & 0x08)) {\n        if ((handleSecure & 0x08) && !this._aclStream.encrypted) {\n          response = this.errorResponse(requestType, valueHandle, ATT_ECODE_AUTHENTICATION);\n        } else if (this._preparedWriteRequest) {\n          if (this._preparedWriteRequest.handle !== handle) {\n            response = this.errorResponse(requestType, valueHandle, ATT_ECODE_UNLIKELY);\n          } else if (offset === (this._preparedWriteRequest.offset + this._preparedWriteRequest.data.length)) {\n            this._preparedWriteRequest.data = Buffer.concat([\n              this._preparedWriteRequest.data,\n              data\n            ]);\n\n            response = new Buffer(request.length);\n            request.copy(response);\n            response[0] = ATT_OP_PREP_WRITE_RESP;\n          } else {\n            response = this.errorResponse(requestType, valueHandle, ATT_ECODE_INVALID_OFFSET);\n          }\n        } else {\n          this._preparedWriteRequest = {\n            handle: handle,\n            valueHandle: valueHandle,\n            offset: offset,\n            data: data\n          };\n\n          response = new Buffer(request.length);\n          request.copy(response);\n          response[0] = ATT_OP_PREP_WRITE_RESP;\n        }\n      } else {\n        response = this.errorResponse(requestType, valueHandle, ATT_ECODE_WRITE_NOT_PERM);\n      }\n    } else {\n      response = this.errorResponse(requestType, valueHandle, ATT_ECODE_ATTR_NOT_LONG);\n    }\n  } else {\n    response = this.errorResponse(requestType, valueHandle, ATT_ECODE_INVALID_HANDLE);\n  }\n\n  return response;\n};\n\nGatt.prototype.handleExecuteWriteRequest = function(request) {\n  var response = null;\n\n  var requestType = request[0];\n  var flag = request[1];\n\n  if (this._preparedWriteRequest) {\n    var valueHandle = this._preparedWriteRequest.valueHandle;\n\n    if (flag === 0x00) {\n      response = new Buffer([ATT_OP_EXEC_WRITE_RESP]);\n    } else if (flag === 0x01) {\n      var callback = (function(requestType, valueHandle) {\n        return function(result) {\n          var callbackResponse = null;\n\n          if (ATT_ECODE_SUCCESS === result) {\n            callbackResponse = new Buffer([ATT_OP_EXEC_WRITE_RESP]);\n          } else {\n            callbackResponse = this.errorResponse(requestType, valueHandle, result);\n          }\n\n          debug('execute write response: ' + callbackResponse.toString('hex'));\n\n          this.send(callbackResponse);\n        }.bind(this);\n      }.bind(this))(requestType, this._preparedWriteRequest.valueHandle);\n\n      this._preparedWriteRequest.handle.attribute.emit('writeRequest', this._preparedWriteRequest.data, this._preparedWriteRequest.offset, false, callback);\n    } else {\n      response = this.errorResponse(requestType, 0x0000, ATT_ECODE_UNLIKELY);\n    }\n\n    this._preparedWriteRequest = null;\n  } else {\n    response = this.errorResponse(requestType, 0x0000, ATT_ECODE_UNLIKELY);\n  }\n\n  return response;\n};\n\nGatt.prototype.handleConfirmation = function(request) {\n  if (this._lastIndicatedAttribute) {\n    if (this._lastIndicatedAttribute.emit) {\n      this._lastIndicatedAttribute.emit('indicate');\n    }\n\n    this._lastIndicatedAttribute = null;\n  }\n};\n\nmodule.exports = Gatt;\n"}